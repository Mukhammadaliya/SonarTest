name: Prepare release Verifix

on:
  push:
    branches:
      - verifix
    paths:
      - VERSION.md
  workflow_dispatch:

env:
  RESOURCE_REPO: ${{ vars.RESOURCE_REPO || 'greenwhite/verifix_resource' }}
  ORACLE_DIR: ${{ vars.ORACLE_DIR || './oracle' }}
  APP_DIR: ${{ vars.APP_DIR || '.' }}
  APP_CHANGED_DIR: ${{ vars.APP_CHANGED_DIR || './src' }}
  RELEASE_DIR: ${{ vars.RELEASE_DIR_VERIFIX || 'build' }}
  RELEASE_SOURCE_DIR: ${{ vars.RELEASE_SOURCE_DIR || 'target/' }}
  SASS_DIR: ${{ vars.SASS_DIR || 'web/biruni' }}
  ANGULAR_DIR: ${{ vars.ANGULAR_DIR || 'web2' }}
  BUILD_SCRIPT_PATH: ${{ vars.BUILD_SCRIPT_PATH || './.github/scripts/build_sql.py' }}
  ORACLE_SOURCE_DIR: ${{ vars.ORACLE_SOURCE_DIR || './target/db_install' }}
  ORACLE_RELEASE_DIR: ${{ vars.ORACLE_RELEASE_DIR || 'db_install' }}
  VERIFIX_TAG_SUFFIX: ${{ vars.VERIFIX_TAG_SUFFIX || '-verifix' }}
  READ_VERSION_SCRIPT_PATH: ${{ vars.READ_VERSION_SCRIPT_PATH || './.github/scripts/read_version.py' }}
  VERSION_FILE_PATH: ${{ vars.VERSION_FILE_PATH || './VERSION.md' }}
  WEB_DIR: ${{ vars.WEB_DIR || './web' }}

jobs:
  read-version:
    runs-on: ubuntu-latest
    outputs:
      version-number: ${{ steps.read-version.outputs.version-number }}
      raw-version-number: ${{ steps.read-version.outputs.raw-version-number }}
      major-version: ${{ steps.read-version.outputs.major-version }}
      is-prerelease: ${{ steps.read-version.outputs.is-prerelease }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if VERSION.md exists
        run: |
          if [ ! -f "VERSION.md" ]; then
            echo "Error: VERSION.md file not found"
            exit 1
          fi

      - name: Read version from VERSION.md
        id: read-version
        run: python ${{ env.READ_VERSION_SCRIPT_PATH }} ${{ env.VERSION_FILE_PATH }}

      - name: Print version
        run: |
          echo "Version ${{ steps.read-version.outputs.version-number }}"
          echo "Major version ${{ steps.read-version.outputs.major-version }}"
          echo "Prerelease ${{ steps.read-version.outputs.is-prerelease }}"

      - name: Exit on prerelease
        if: steps.read-version.outputs.is-prerelease == 'true'
        run: |
          echo "Error: trying to publish prerelease tag, remove prerelease version"
          exit 1

      - name: Check tag not exists
        if: github.ref_name == 'master'
        run: |
          if gh release view ${{ steps.read-version.outputs.version-number }} &>/dev/null; then
            echo "Error: version tag ${{ steps.read-version.outputs.version-number }} already exists"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ github.token }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: read-version
    defaults:
        run:
          working-directory: ${{ github.event.repository.name }}

    steps:
    - name: greenwhite-actions-app-install token
      id: greenwhite-actions-app
      uses: getsentry/action-github-app-token@v2
      with:
        app_id: ${{ secrets.APP_ID }}
        private_key: ${{ secrets.APP_PRIVATE_KEY }}

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ steps.greenwhite-actions-app.outputs.token }}
        repository: ${{ env.RESOURCE_REPO }}
        path: build

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: ${{ github.event.repository.name }}
        fetch-depth: 0

    - name: Read latest tag from this commit
      id: read-tag
      run: |
        export LATEST_TAG=$(git describe --abbrev=0 --tags --match *${{ env.VERIFIX_TAG_SUFFIX }})
        echo "Latest tag reachable from commit: $LATEST_TAG"
        echo "latest=$LATEST_TAG" >> $GITHUB_OUTPUT

    - name: Check for changes in VERSION.md
      uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          app-changed:
            - ${{ env.APP_CHANGED_DIR }}/**
          oracle-changed:
            - ${{ env.ORACLE_DIR }}/**
          sbt-changed:
            - ${{ env.APP_DIR }}/build.sbt
          web-changed:
            - ${{ env.WEB_DIR }}/**
        base: ${{ steps.read-tag.outputs.latest }}
        working-directory: ${{ github.event.repository.name }}

    - name: Install sass
      run: npm install -g sass

    - name: Complile css
      run: sass main.scss main.css --no-source-map -s compressed
      working-directory: ${{ github.event.repository.name }}/${{ env.SASS_DIR }}

    - name: Use Node.js 20.12.0
      uses: actions/setup-node@v4
      with:
        node-version: 20.12.0
        cache: 'npm'
        cache-dependency-path: ${{ github.event.repository.name }}/${{ env.ANGULAR_DIR }}/package-lock.json

    - name: Install Angular dependencies
      run: npm ci
      working-directory: ${{ github.event.repository.name }}/${{ env.ANGULAR_DIR }}

    - name: Build Angular application
      run: npm run build
      working-directory: ${{ github.event.repository.name }}/${{ env.ANGULAR_DIR }}

    - name: Run build_sql.py
      if: steps.filter.outputs.oracle-changed == 'true' || github.event_name == 'workflow_dispatch'
      run: python ${{ env.BUILD_SCRIPT_PATH }} ${{ github.event.repository.name }} ${{ env.ORACLE_DIR }} ${{ env.ORACLE_SOURCE_DIR }}

    - name: Move build results
      if: steps.filter.outputs.oracle-changed == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        if [ -n "$(find "${{ env.ORACLE_SOURCE_DIR }}" -maxdepth 2 -type f -print -quit)" ]; then
          echo "Files found in the directory:"
          find "${{ env.ORACLE_SOURCE_DIR }}" -maxdepth 2 -type f -print
          mkdir -p ../build/${{ env.RELEASE_DIR }}/${{ env.ORACLE_RELEASE_DIR }}
          cp -r ${{ env.ORACLE_SOURCE_DIR }}/. ../build/${{ env.RELEASE_DIR }}/${{ env.ORACLE_RELEASE_DIR }}
        else
          echo "Directory is empty."
        fi

    - name: Check file existence
      id: check-files
      uses: andstor/file-existence-action@v2
      with:
        files: "${{ github.event.repository.name }}/${{ env.APP_DIR }}/build.sbt"

    - name: Set up JDK 21.0.1
      if: (steps.filter.outputs.app-changed == 'true' || steps.filter.outputs.web-changed == 'true' || steps.filter.outputs.sbt-changed == 'true' || github.event_name == 'workflow_dispatch') && steps.check-files.outputs.files_exists == 'true'
      uses: actions/setup-java@v4
      with:
        java-version: '21.0.1'
        distribution: 'oracle'
        cache: 'sbt'

    - name: Build Scala project
      if: (steps.filter.outputs.app-changed == 'true' || steps.filter.outputs.web-changed == 'true' || github.event_name == 'workflow_dispatch') && steps.check-files.outputs.files_exists == 'true'
      run: sbt build
      working-directory: ${{ github.event.repository.name }}/${{ env.APP_DIR }}

    - name: Assembly Scala project
      if: (steps.filter.outputs.sbt-changed == 'true' || github.event_name == 'workflow_dispatch') && steps.check-files.outputs.files_exists == 'true'
      run: sbt assemblyPackageDependency
      working-directory: ${{ github.event.repository.name }}/${{ env.APP_DIR }}

    - name: Get Build Directory
      if: (steps.filter.outputs.app-changed == 'true' || steps.filter.outputs.web-changed == 'true' || steps.filter.outputs.sbt-changed == 'true' || github.event_name == 'workflow_dispatch') && steps.check-files.outputs.files_exists == 'true'
      id: build-directory
      run: |
        # Run the sbt command and capture the output in a variable
        BUILD_DIRECTORY=$(sbt -no-colors 'print buildDirectory' | tail -n 1)
        echo "Build Directory: $BUILD_DIRECTORY"
        echo "directory=$BUILD_DIRECTORY" >> $GITHUB_OUTPUT
      working-directory: ${{ github.event.repository.name }}/${{ env.APP_DIR }}

    - name: Move build results
      if: (steps.filter.outputs.app-changed == 'true' || steps.filter.outputs.web-changed == 'true' || steps.filter.outputs.sbt-changed == 'true' || github.event_name == 'workflow_dispatch') && steps.check-files.outputs.files_exists == 'true'
      run: |
        if [ -n "$(find "${{ steps.build-directory.outputs.directory }}" -maxdepth 2 -type f -print -quit)" ]; then
          echo "Files found in the directory:"
          find "${{ steps.build-directory.outputs.directory }}" -maxdepth 2 -type f -print
          mkdir -p ../build/${{ env.RELEASE_DIR }}
          cp -r ${{ steps.build-directory.outputs.directory }}/. ../build/${{ env.RELEASE_DIR }}
        else
          echo "Directory is empty."
        fi

    - name: Commit and push changes
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        repository: build

  create-tag:
    needs: [read-version, build-and-push]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Git
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Create tag
      run: |
        git tag "${{ needs.read-version.outputs.version-number }}${{ env.VERIFIX_TAG_SUFFIX }}" -m "Tag created on merge to verifix"
        git push origin "${{ needs.read-version.outputs.version-number }}${{ env.VERIFIX_TAG_SUFFIX }}"

  create-tag-and-release-resource:
    needs: [read-version, build-and-push]
    runs-on: ubuntu-latest

    steps:
    - name: greenwhite-actions-app-install token
      id: greenwhite-actions-app
      uses: getsentry/action-github-app-token@v2
      with:
        app_id: ${{ secrets.APP_ID }}
        private_key: ${{ secrets.APP_PRIVATE_KEY }}

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ steps.greenwhite-actions-app.outputs.token }}
        repository: ${{ env.RESOURCE_REPO }}

    - name: Set up Git
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Create tag
      run: |
        git tag "${{ needs.read-version.outputs.version-number }}" -m "Tag created on merge to master"
        git push origin "${{ needs.read-version.outputs.version-number }}"

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: ''  # Add file paths to include in the release (leave empty for just the tag)
        tag_name: "${{ needs.read-version.outputs.version-number }}"
        body: "Release notes or description for version ${{ needs.read-version.outputs.version-number }}"
        token: ${{ steps.greenwhite-actions-app.outputs.token }}
        repository: ${{ env.RESOURCE_REPO }}
